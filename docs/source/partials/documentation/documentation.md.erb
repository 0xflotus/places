## Getting started

To use Algolia Places, all you need is an `<input />` and some JavaScript code that will load
and use the places.js library.

### Using `<script>` tags

```html
<input  type="text" id="demo" placeholder="Where are we going?" />
<script src="<%= config[:places_cdn_url] %>"></script>
<script>
  var placesAutocomplete = places({
    container: document.querySelector('#places-demo')
  });
</script>
```

### With npm

Install the module:

```sh
npm install places.js --save
```

Put an `<input />` in your html page:

```html
<input type="text" id="demo" placeholder="Where are we going?" />
```

Initialize the places.js library:

```js
import places from 'places.js';
const placesAutocomplete = places({
  container: document.querySelector('#places-demo')
});
```

### Demo

As a result, you will get the Algolia Places autocompletion menu:

<input type="text" id="docs-getting-started-demo" placeholder="Where are we going?" />

## API

### options

Here are the options you can pass to the `places(options)` function.

<!-- Indentation is on purpose for <td>s, to allow HTML inside markdown -->
<table class="api">
  <thead><tr>
    <th>Option name</th>
    <th>Type</th>
    <th>Required</th>
    <th>Description</th>
  </tr></thead>
  <tbody>
    <tr>
<td markdown="span">`container`</td>
<td markdown="span">[HTMLInputElement](https://www.w3.org/2003/01/dom2-javadoc/org/w3c/dom/html2/HTMLInputElement.html)</td>
<td markdown="span">**yes**</td>
<td markdown="1">
Determines the `<input />` that will be used for the Algolia Places autocompletion menu.

You just need to pass a reference to an Element. Obtained via
[document.querySelector](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector) for example.
</td>
    </tr>
    <tr>
<td markdown="span">`language`</td>
<td markdown="span">string</td>
<td markdown="span">no</td>
<td markdown="1">
Change the default language of the results.
You can pass two letters country codes ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_3166-1#Officially_assigned_code_elements)).

**Default**: Current user language obtained via `navigator.language` in the two letter form.
Example: `en` when navigator.language is `en_US`.
</td>
    </tr>
    <tr>
<td markdown="span">`countries`</td>
<td markdown="span">string[]</td>
<td markdown="span">no</td>
<td markdown="1">
Change the countries to search in. You must pass an array of two letters country codes
([ISO 639-1](https://en.wikipedia.org/wiki/ISO_3166-1#Officially_assigned_code_elements)).

**Default**: Search on the whole planet.
</td>
    </tr>
  </tbody>
</table>

Simple example with only the required parameter:

```js
const placesAutocomplete = {
  container: document.querySelector('#demo')
};
```

Advanced example using all parameters:

```js
const placesAutocomplete = {
  container: document.querySelector('#demo'),
  language: 'de',
  countries: ['us', 'ru']
};
```

### events

The Algolia Places autocomplete exposes some events that you can register to:

```js
const placesAutocomplete = {
  container: document.querySelector('#demo')
};

placesAutocomplete.on('change', suggestion => console.log(suggestion));
```

<table class="api">
  <thead><tr>
    <th>Event name</th>
    <th>Event data</th>
    <th>Fired when</th>
    <th>Usecase</th>
  </tr></thead>
  <tbody>
    <tr>
<td markdown="span">`change`</td>
<td markdown="span">[suggestion](#suggestion-object)</td>
<td markdown="1">
Suggestion selected in the dropdown or hint was validated.
</td>
<td markdown="1">
FIXME
</td>
    </tr>
    <tr>
<td markdown="span">`suggestions`</td>
<td markdown="span">[suggestion](#suggestion-object)[]</td>
<td markdown="1">
Dropdown receives suggestions. You will receive the array of suggestions that are displayed.
</td>
<td markdown="1">
You can use this event to display the suggestions [on a map](FIXME example).
</td>
    </tr>
    <tr>
<td markdown="span">`cursorchanged`</td>
<td markdown="span">[suggestion](#suggestion-object)</td>
<td markdown="1">
Arrows keys used to navigate suggestions.
</td>
<td markdown="1">
You can use this event to [pre-fill other form elements](FIXME).
</td>
    </tr>
  </tbody>
</table>

### Suggestion object

All of the events will send suggestion objects with those propreties:

<table class="api">
  <thead><tr>
    <th>Property name</th>
    <th>Type</th>
    <th>Description</th>
  </tr></thead>
  <tbody>
    <tr>
<td markdown="span">`administrative`</td>
<td markdown="span">string</td>
<td markdown="1">
FIXME.
</td>
    </tr>
    <tr>
<td markdown="span">`city`</td>
<td markdown="span">string</td>
<td markdown="1">
City name.
</td>
    </tr>
    <tr>
<td markdown="span">`country`</td>
<td markdown="span">string</td>
<td markdown="1">
Country name.
</td>
    </tr>
    <tr>
<td markdown="span">`countryCode`</td>
<td markdown="span">string</td>
<td markdown="1">
Two letters country code ([ISO 639-1](https://en.wikipedia.org/wiki/ISO_3166-1#Officially_assigned_code_elements)).
</td>
    </tr>
    <tr>
<td markdown="span">`isCity`</td>
<td markdown="span">boolean</td>
<td markdown="1">
Will be true if the current suggestion is a city.
</td>
    </tr>
    <tr>
<td markdown="span">`lat`</td>
<td markdown="span">number</td>
<td markdown="1">
Latitude of the place found.
</td>
    </tr>
    <tr>
<td markdown="span">`lng`</td>
<td markdown="span">number</td>
<td markdown="1">
Longitude of the place found.
</td>
    </tr>
    <tr>
<td markdown="span">`name`</td>
<td markdown="span">string</td>
<td markdown="1">
Display name of the place found. This is the value that is shown in the dropdown or in the input when
validated. Without any html formatting.

Examples:

  - Paris ÃŽle-de-France, France
  - 589 Howard Street San Francisco, California, United States of America
</td>
    </tr>
  </tbody>
</table>

## Rate limit

FIXME

## Examples

We have complete examples for you to get inspired on what you can do with Algolia Places, have a look.
